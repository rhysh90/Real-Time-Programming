-- interrupt package for skeleton test program skel2 for trains --
-- requires Swindows, Simrail2 (vsn 3.0+), Raildefs
-- and Halls2 & Io_Ports for Simrail2
-- Only displays one line for each interrupt.
--
-- Version: 1.0 extracted from skel2 for GNAT2009, 19-Feb-09
-- Version: 1.1 hide protected, 16-Mar-10
-- Version: 1.3 improve display, eg ...5.7.., 31-Jan-2011
-- Version: 1.4 add W_Height to eliminate a magic no, reformat 22-Jun-2011
-- Version: 2.2 write 'I' events to Slogger 19-Mar-2013
-- Version  3.0 25-Feb-2015 procedure no longer protected
--
-- Copyright: Dr R. K Allen, Faculty of Sc Eng Tech, Swinburne Uni Tech
--
with Ada.Integer_Text_Io;
with Swindows;  use Swindows;
with Unsigned_Types;  use Unsigned_Types;
with
   Raildefs,
   Int32defs,
   Halls2;
use Raildefs;
with Slogger;  --v2.2

package body Interrupt_Hdlr is

   W_Interrupts : Swindows.Window;
   -- assumed to be full width, ie 78 columns inside, and W_Height lines inside
   W_Height : constant Natural := 14;

   package Iio renames Ada.Integer_Text_Io;

   subtype String8 is String(1..8);  -- cant be declared in a protected.

   --protected Interrupt is
      procedure Analyze (
            Offset : in     Raildefs.Sensor_Idx;
            -- 0 or 32
            Value : in     Raildefs.Four_Registers );-- vsn 2.0.5
      -- this procedure conforms to Raildefs.Proc4_Access
   --private
      Number : Natural := 1;
      Line_Number : Natural := 1;
      Fg : Swindows.Color := Swindows.White;
      S : String(1..78) :=
            (1..4|13|22|31|40|49|58|67|76..78 => ' ', others => '.');
      function To_String (
            Val        : Unsigned_8;
            LSB_Sensor : Raildefs.Sensor_Idx)
        return String8;
   --end Interrupt;

   procedure Init (
         Win : in     Swindows.Window) is
   begin
      W_Interrupts := Win;
   end Init;

   procedure Install is -- added v1.1
   begin
      Halls2.Install_Int_Handling(Analyze'access);  --was Interrupt.Analyze
   end Install;


   --protected body Interrupt is

      -- this version just displays all the current states:
      -- it takes too much screen space
      procedure Analyze (
            Offset : in     Raildefs.Sensor_Idx;
            Value  : in     Raildefs.Four_Registers) is
         --
         use Int32defs;

         procedure Increment_Line is -- v1.4
         begin
            Line_Number := (Line_Number mod W_Height) + 1;
            if Line_Number = 1 then
               -- change colour
               if Fg = White then
                  Fg := Yellow;
               else
                  Fg := White;
               end if;
            end if;
         end Increment_Line;

      begin
         -- if logging is enabled (it is by default) write an 'I' event.
         -- This could be suppressed entirely, as Simrail2 v2.2.1 and HW Halls2 v2.6
         -- send 'i' events.  'i' to 'I' measures interrupt queue latency, but
         -- this is meaningless for simrail2.
         if Slogger.On then
            Slogger.Send_Event('I', Integer(Offset), Value);
         end if;

         -- assemble
         Iio.Put(S(1..3), Number);
         -- display sensor bytes and turnout nibble in binary ('.'=1)
         if Offset = 0 then -- sensors 1..32
            S( 5..12) := To_String(Value(0), 1);
            S(14..21) := To_String(Value(1), 9);
            S(23..30) := To_String(Value(2), 17);
            S(32..39) := To_String(Value(3), 25);
         else  -- sensors 33..64
            S(41..48) := To_String(Value(0), 33);
            S(50..57) := To_String(Value(1), 41);
            S(59..66) := To_String(Value(2), 49);
            S(68..75) := To_String(Value(3), 57);
         end if;
         -- last byte is for debugging simrail or Halls2:
         if Value'Last = 4 then  -- (a bit of future-proofing)
            Iio.Put(S(76..78), Integer(Value(4)));  -- added v.1.5.2
         end if;
         Put_Line(W_Interrupts, S, Line_Number, Foreground=>Fg);
         Number := (Number + 1) mod 1000;  -- serial number
         Increment_Line;

      exception
         when Constraint_Error =>
            Put_Line(W_Interrupts, "int constraint", Line_Number);
            Increment_Line;  -- v1.4
         when Tasking_Error =>
            Put_Line(W_Interrupts, "int tasking", Line_Number);
            Increment_Line;  -- v1.4
         when others =>
            Put_Line(W_Interrupts, "int others", Line_Number);
            Increment_Line;  -- v1.4
      end Analyze;

      function To_String (
            Val        : Unsigned_8;
            LSB_Sensor : Raildefs.Sensor_Idx)
        return String8 is
         use Int32defs;
         V      : Sensor_Register := Unsigned_8_To_Sensor_Register (Val);
         Result : String8         := "........";
      begin
         for I in Sensor_Idx range 0..7 loop  -- note display LSB on left
            if V(I) = Raildefs.On then
               Result(Integer(I)+1) :=
                  Character'Val(48 + Integer(I + LSB_Sensor) mod 10);
            end if;
         end loop;
         return Result;
      end To_String;

   --end Interrupt;

end Interrupt_Hdlr;
